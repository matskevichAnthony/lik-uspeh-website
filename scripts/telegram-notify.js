/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–∞—Ö
 */

const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    botToken: process.env.TELEGRAM_BOT_TOKEN,
    chatId: process.env.TELEGRAM_CHAT_ID,
    jsonFile: path.join(__dirname, '../public/index.json'),
    cacheFile: path.join(__dirname, '../.telegram_cache'),
    baseUrl: process.env.SITE_URL || 'https://lik-uspeh.ru'
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 */
async function sendTelegramMessage(message) {
    const url = `https://api.telegram.org/bot${CONFIG.botToken}/sendMessage`;
    
    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            chat_id: CONFIG.chatId,
            text: message,
            parse_mode: 'Markdown',
            disable_web_page_preview: false
        })
    });

    if (!response.ok) {
        const error = await response.json();
        throw new Error(`Telegram API Error: ${error.description}`);
    }

    return response.json();
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –∏–∑ –±–ª–æ–≥–∞
 */
async function getLatestBlogPost() {
    try {
        const jsonContent = await fs.readFile(CONFIG.jsonFile, 'utf8');
        const posts = JSON.parse(jsonContent);
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –∏–∑ –±–ª–æ–≥–∞
        const blogPosts = posts.filter(post => post.section === 'blog');
        return blogPosts.length > 0 ? blogPosts[0] : null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞:', error);
        return null;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –ø–æ—Å—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
 */
async function isPostAlreadySent(post) {
    try {
        const postHash = crypto
            .createHash('md5')
            .update(post.title + post.date)
            .digest('hex');

        try {
            const cacheContent = await fs.readFile(CONFIG.cacheFile, 'utf8');
            return cacheContent.includes(postHash);
        } catch (error) {
            // –§–∞–π–ª –∫–µ—à–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            return false;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–µ—à–∞:', error);
        return false;
    }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ö–µ—à –ø–æ—Å—Ç–∞ –≤ –∫–µ—à
 */
async function markPostAsSent(post) {
    try {
        const postHash = crypto
            .createHash('md5')
            .update(post.title + post.date)
            .digest('hex');

        await fs.appendFile(CONFIG.cacheFile, postHash + '\n');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∫–µ—à:', error);
    }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
 */
function formatTelegramMessage(post) {
    const summary = post.summary.length > 200 
        ? post.summary.substring(0, 200) + '...'
        : post.summary;

    return `üéì *–ù–æ–≤–æ—Å—Ç—å –æ—Ç –≥–∏–º–Ω–∞–∑–∏–∏ ¬´–õ–ò–ö-–£—Å–ø–µ—Ö¬ª*

*${post.title}*

${summary}

üìÖ ${new Date(post.date).toLocaleDateString('ru-RU')}

[–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é](${post.permalink})

#–õ–∏–∫–£—Å–ø–µ—Ö #–ì–∏–º–Ω–∞–∑–∏—è #–ù–æ–≤–æ—Å—Ç–∏`;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (!CONFIG.botToken || !CONFIG.chatId) {
            console.error('–û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID');
            process.exit(1);
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
        const latestPost = await getLatestBlogPost();
        if (!latestPost) {
            console.log('–ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ—Å—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        if (await isPostAlreadySent(latestPost)) {
            console.log('–ü–æ—Å—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram');
            return;
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = formatTelegramMessage(latestPost);
        await sendTelegramMessage(message);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
        await markPostAsSent(latestPost);

        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main();
}

module.exports = {
    sendTelegramMessage,
    getLatestBlogPost,
    formatTelegramMessage
};
